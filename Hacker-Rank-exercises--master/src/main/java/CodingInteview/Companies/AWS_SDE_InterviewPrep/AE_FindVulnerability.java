package CodingInteview.Companies.AWS_SDE_InterviewPrep;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.stream.IntStream;
import java.util.stream.Stream;

import static java.util.stream.Collectors.toList;

public class AE_FindVulnerability {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));

        int k = Integer.parseInt(bufferedReader.readLine().trim());

        int m = Integer.parseInt(bufferedReader.readLine().trim());

        int vulnerabilityCount = Integer.parseInt(bufferedReader.readLine().trim());

        List<Integer> vulnerability = IntStream.range(0, vulnerabilityCount).mapToObj(i -> {
                    try {
                        return bufferedReader.readLine().replaceAll("\\s+$", "");
                    } catch (IOException ex) {
                        throw new RuntimeException(ex);
                    }
                })
                .map(String::trim)
                .map(Integer::parseInt)
                .collect(toList());

        List<Integer> result = ResultFindVulnerability.findKthMinimumVulnerability(k, m, vulnerability);
        System.out.println(result);
    }
}

class ResultFindVulnerability {

//    public static List<Integer> findKthMinimumVulnerability(int k, int m, List<Integer> vulnerability) {
//        //1. Make the groups based on the m value.
//
//        //Create the result list
//        List<Integer> result = new ArrayList<>();
//
//        for(int i = 0; i <= vulnerability.size()-m; i++){
//            if(m+i > vulnerability.size())break;
//            List<Integer> newList = vulnerability.subList(i, m+i);
//            result.add(findKthVul(newList,k));
//        }
//
//        return result;
//
//    }
//
//    public static int findKthVul(List<Integer> list, int k){
//        //Sort the group of servers.
//        List<Integer> copiedList = new ArrayList<>(list);
//        Collections.sort(copiedList);
//
//        return copiedList.get(k-1);
//    }

    public static List<Integer> findKthMinimumVulnerability(int k, int m, List<Integer> vulnerability) {
        //1. Make the groups based on the m value.

        //Create the result list
        List<Integer> result = new ArrayList<>();

        for(int i = 0; i <= vulnerability.size()-m; i++){
            if(m+i > vulnerability.size())break;
            Optional<Integer> result2 = vulnerability.subList(i,m+i).stream().sorted().skip(k-1).findFirst();
            result2.ifPresent(result::add);
        }

        return result;

    }

    public static int findKthVul(List<Integer> list, int k){
        //Sort the group of servers.
        List<Integer> copiedList = new ArrayList<>(list);
        Collections.sort(copiedList);

        return copiedList.get(k-1);
    }

}